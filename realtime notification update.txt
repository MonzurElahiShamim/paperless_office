import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Home_SU extends javax.swing.JFrame {

    private DefaultListModel<Notification> listModel;
    private List<Notification> notifications;
    private Timer timer; // Timer for real-time updates

    public Home_SU() {
        this.notifications = getNotifications();
        listModel = new DefaultListModel<>();

        // Add notifications to the list model
        for (Notification notification : notifications) {
            listModel.addElement(notification);
        }

        initComponents();

        // Set up the timer for real-time updates (update every 1 minute, change as needed)
        timer = new Timer(60000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateNotifications(); // Fetch and update new notifications
            }
        });
        timer.start(); // Start the timer
    }

    // Fetch new notifications from the database
    private void updateNotifications() {
        List<Notification> newNotifications = getNotifications();

        // Compare the new notifications with the existing ones
        for (Notification newNotification : newNotifications) {
            if (!notifications.contains(newNotification)) {
                // Add the new notification to the list model
                listModel.addElement(newNotification);
            }
        }

        // Update the notifications list
        notifications = newNotifications;
    }

    // Rest of your code...
}
